{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7bf6f48ac9b7ae14151c365e3b6c70deeb022a66","modified":1523092514493},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1523090185755},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1523090185755},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1523090185755},{"_id":"themes/apollo/_config.yml","hash":"2b159c539d56c2b35070025d7ad8f1cf38bd6c92","modified":1523092208095},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1523090185756},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1523090185760},{"_id":"themes/apollo/.DS_Store","hash":"39b60cc542e0b168f3fc817bdabbd36f1914bdac","modified":1523094789968},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522301075390},{"_id":"source/_posts/hello-world.md","hash":"b9cb4bcb34c4a962fa7898663bcff542f231fa12","modified":1522582280977},{"_id":"source/_posts/max-subsequence-sum.md","hash":"e2c40d9514bf3a24da0cf503ad3f575b77812948","modified":1522593135871},{"_id":"source/_posts/the-most-merciful.md","hash":"1572972e4f6627878552721d640af1df35928a9b","modified":1522593142838},{"_id":"source/_posts/two-arrays-median.md","hash":"8942e5760e8aa3c46d27214483fe2c6e1c5bca4f","modified":1522844477430},{"_id":"source/messages/index.md","hash":"6e8cdbc26eee73f3e326d85c7b4ac14077a02590","modified":1523091913334},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1523090185756},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1523090185756},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1523090185756},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1523090185757},{"_id":"themes/apollo/layout/.DS_Store","hash":"65da3604b3546cf73e481f60b70148bad8707e4b","modified":1523092286222},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1523090185757},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1523090185757},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1523090185759},{"_id":"themes/apollo/source/.DS_Store","hash":"50b1efc9fe4f4a50ea642507f71426822250492f","modified":1523094805515},{"_id":"themes/apollo/source/favicon.png","hash":"7348e68f94eddf7cc4bbd689655202126e80c2c0","modified":1522636638000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1523090185757},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1523090185758},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1523090185758},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1523090185758},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1523090185758},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1523090185759},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1523090185759},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1523090185759},{"_id":"themes/apollo/source/css/apollo.css","hash":"224d2c0afb1c10d405310004f8dbb5a34136b3c1","modified":1523093943815},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523090185764},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523090185765},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1523090185771},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1523090185766},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1523090185767},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1523090185767},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1523090185768},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1523090185769},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1523090185769},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1523090185770},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1523090185771},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1523090185771},{"_id":"public/atom.xml","hash":"39183513845dce14920ded67b7fa196bc161603a","modified":1523094815628},{"_id":"public/sitemap.xml","hash":"e0c720a2663f7c480bace81418bc48b690a4df5a","modified":1523094815629},{"_id":"public/messages/index.html","hash":"827dcff27e7c2743631ec7f6e287003d98445a23","modified":1523094815632},{"_id":"public/2018/04/04/two-arrays-median/index.html","hash":"665af9443c65f4db5ea776cdd41c742d74931854","modified":1523094815632},{"_id":"public/2018/04/01/the-most-merciful/index.html","hash":"ecdbdb2377ac309f9a309f0432dec2581fb7946f","modified":1523094815632},{"_id":"public/2018/03/28/max-subsequence-sum/index.html","hash":"432c211626d735e4a7ca706c669160efad48056c","modified":1523094815632},{"_id":"public/2018/01/01/hello-world/index.html","hash":"a0a94e9f8f71e1c341c66da45a034a02198a4052","modified":1523094815632},{"_id":"public/categories/algorithms/index.html","hash":"b788ccd7967c5b7830878d348fd8d5caf8176ee7","modified":1523094815632},{"_id":"public/categories/life/index.html","hash":"b1bf0e0723c5025237720495dd894d49422ae8a3","modified":1523094815633},{"_id":"public/archives/index.html","hash":"f60eac650e2c65a55f8a5bc24b9de77762324e90","modified":1523094815633},{"_id":"public/index.html","hash":"16ef62dadf6ca0cf4d7a5046cb0ef2a36f09167c","modified":1523094815633},{"_id":"public/tags/algorithms/index.html","hash":"f09f2873d784d6990c3f7ea872b7fcd90b8a1ae4","modified":1523094815633},{"_id":"public/tags/life/index.html","hash":"b1bf0e0723c5025237720495dd894d49422ae8a3","modified":1523094815633},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523094815635},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523094815635},{"_id":"public/favicon.png","hash":"7348e68f94eddf7cc4bbd689655202126e80c2c0","modified":1523094815639},{"_id":"public/css/apollo.css","hash":"224d2c0afb1c10d405310004f8dbb5a34136b3c1","modified":1523094815647},{"_id":"public/scss/apollo.css","hash":"6216c473855db6af71f910746be48405c8c499f6","modified":1523094815682}],"Category":[{"name":"algorithms","_id":"cjfp7bszt0004ivfy14w1nn79"},{"name":"life","_id":"cjfp7bszx0007ivfyg7chpjx3"}],"Data":[],"Page":[{"title":"Leave me a message here","date":"2018-04-07T08:54:55.000Z","_content":"","source":"messages/index.md","raw":"---\ntitle: Leave me a message here\ndate: 2018-04-07 16:54:55\n---\n","updated":"2018-04-07T09:05:13.334Z","path":"messages/index.html","comments":1,"layout":"page","_id":"cjfp7bszo0001ivfya0v52vei","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-12-31T16:00:00.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018.1.1\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-04-01T11:31:20.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp7bszk0000ivfyt3qjsur1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"关于分治法求最大子序列和问题","date":"2018-03-27T16:00:00.000Z","_content":"\n求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。\n\n显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。\n\n<!--more-->\n\n分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。\n\n例如序列： 4 -3 5 -2 -1 2 6 -2\n\n|前半部分 |后半部分|\n|-----|------|\n|4 -3 5 -2| -1 2 6 -2|\n\n最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。\n\n因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.\n\n```c\nint MaxSubSum(int A[], int left, int right) {\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBoarderSum;\n    int Center, i;\n\n    if (left == right) {\n        if (A[left] > 0) {\n            return A[left];\n        } else {\n            return 0;\n        }\n    }\n    Center = (left + right) / 2;\n    MaxLeftSum = MaxSubSum(A, left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, right);\n\n    MaxLeftBorderSum = LeftBorderSum = 0;\n    for (i = Center; i >= left; i--) {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum > MaxLeftBorderSum) {\n            MaxLeftBorderSum = LeftBorderSum;\n        }\n    }\n    MaxRightBorderSum = RightBoarderSum = 0;\n    for (i = Center + 1; i <= right; i++) {\n        RightBoarderSum += A[i];\n        if (RightBoarderSum > MaxRightBorderSum) {\n            MaxRightBorderSum = RightBoarderSum;\n        }\n    }\n    return Max3(MaxLeftSum, MaxRightSum,\n         MaxLeftBorderSum + MaxRightBorderSum);\n}\n\n```\n\n代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。\n\n代码第18-31行分别处理左右两部分的最大子序列和问题。\n\n最后将三者的最大值返回即可。\n\n----\n参考文献：《数据结构与算法分析（C语言描述）》\n","source":"_posts/max-subsequence-sum.md","raw":"---\ntitle: 关于分治法求最大子序列和问题\ndate: 2018.3.28\ncategories: algorithms\ntags: algorithms\n---\n\n求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。\n\n显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。\n\n<!--more-->\n\n分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。\n\n例如序列： 4 -3 5 -2 -1 2 6 -2\n\n|前半部分 |后半部分|\n|-----|------|\n|4 -3 5 -2| -1 2 6 -2|\n\n最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。\n\n因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.\n\n```c\nint MaxSubSum(int A[], int left, int right) {\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBoarderSum;\n    int Center, i;\n\n    if (left == right) {\n        if (A[left] > 0) {\n            return A[left];\n        } else {\n            return 0;\n        }\n    }\n    Center = (left + right) / 2;\n    MaxLeftSum = MaxSubSum(A, left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, right);\n\n    MaxLeftBorderSum = LeftBorderSum = 0;\n    for (i = Center; i >= left; i--) {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum > MaxLeftBorderSum) {\n            MaxLeftBorderSum = LeftBorderSum;\n        }\n    }\n    MaxRightBorderSum = RightBoarderSum = 0;\n    for (i = Center + 1; i <= right; i++) {\n        RightBoarderSum += A[i];\n        if (RightBoarderSum > MaxRightBorderSum) {\n            MaxRightBorderSum = RightBoarderSum;\n        }\n    }\n    return Max3(MaxLeftSum, MaxRightSum,\n         MaxLeftBorderSum + MaxRightBorderSum);\n}\n\n```\n\n代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。\n\n代码第18-31行分别处理左右两部分的最大子序列和问题。\n\n最后将三者的最大值返回即可。\n\n----\n参考文献：《数据结构与算法分析（C语言描述）》\n","slug":"max-subsequence-sum","published":1,"updated":"2018-04-01T14:32:15.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp7bszp0002ivfyiw5akfns","content":"<p>求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。</p>\n<p>显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。</p>\n<a id=\"more\"></a>\n<p>分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。</p>\n<p>例如序列： 4 -3 5 -2 -1 2 6 -2</p>\n<table>\n<thead>\n<tr>\n<th>前半部分</th>\n<th>后半部分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 -3 5 -2</td>\n<td>-1 2 6 -2</td>\n</tr>\n</tbody>\n</table>\n<p>最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。</p>\n<p>因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxSubSum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftSum, MaxRightSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> LeftBorderSum, RightBoarderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Center, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    MaxLeftSum = MaxSubSum(A, left, Center);</span><br><span class=\"line\">    MaxRightSum = MaxSubSum(A, Center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    MaxLeftBorderSum = LeftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        LeftBorderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</span><br><span class=\"line\">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxRightBorderSum = RightBoarderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        RightBoarderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RightBoarderSum &gt; MaxRightBorderSum) &#123;</span><br><span class=\"line\">            MaxRightBorderSum = RightBoarderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Max3(MaxLeftSum, MaxRightSum,</span><br><span class=\"line\">         MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。</p>\n<p>代码第18-31行分别处理左右两部分的最大子序列和问题。</p>\n<p>最后将三者的最大值返回即可。</p>\n<hr>\n<p>参考文献：《数据结构与算法分析（C语言描述）》</p>\n","site":{"data":{}},"excerpt":"<p>求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。</p>\n<p>显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。</p>","more":"<p>分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。</p>\n<p>例如序列： 4 -3 5 -2 -1 2 6 -2</p>\n<table>\n<thead>\n<tr>\n<th>前半部分</th>\n<th>后半部分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 -3 5 -2</td>\n<td>-1 2 6 -2</td>\n</tr>\n</tbody>\n</table>\n<p>最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。</p>\n<p>因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxSubSum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftSum, MaxRightSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> LeftBorderSum, RightBoarderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Center, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    MaxLeftSum = MaxSubSum(A, left, Center);</span><br><span class=\"line\">    MaxRightSum = MaxSubSum(A, Center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    MaxLeftBorderSum = LeftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        LeftBorderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</span><br><span class=\"line\">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxRightBorderSum = RightBoarderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        RightBoarderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RightBoarderSum &gt; MaxRightBorderSum) &#123;</span><br><span class=\"line\">            MaxRightBorderSum = RightBoarderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Max3(MaxLeftSum, MaxRightSum,</span><br><span class=\"line\">         MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。</p>\n<p>代码第18-31行分别处理左右两部分的最大子序列和问题。</p>\n<p>最后将三者的最大值返回即可。</p>\n<hr>\n<p>参考文献：《数据结构与算法分析（C语言描述）》</p>"},{"title":"语言是最仁慈的东西","date":"2018-03-31T16:00:00.000Z","_content":"\nWe are never perfect as we born.\n\n<!--more-->\n\nWe lost, we failed, we broken, we fell down.\n\nBut we hope, we recover, we rise, we march on.\n\nWe don't need to be great, don't need to shine like stars, and we can't always.\n\nYour story may not have such a happy beginning, but that doesn't make who your are. It is the rest of your story, who you chose to be.\n\nEverything we done defines us.\n","source":"_posts/the-most-merciful.md","raw":"---\ntitle: 语言是最仁慈的东西\ndate: 2018.4.1\ncategories: life\ntags: life\n---\n\nWe are never perfect as we born.\n\n<!--more-->\n\nWe lost, we failed, we broken, we fell down.\n\nBut we hope, we recover, we rise, we march on.\n\nWe don't need to be great, don't need to shine like stars, and we can't always.\n\nYour story may not have such a happy beginning, but that doesn't make who your are. It is the rest of your story, who you chose to be.\n\nEverything we done defines us.\n","slug":"the-most-merciful","published":1,"updated":"2018-04-01T14:32:22.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp7bszr0003ivfy0ssqnavb","content":"<p>We are never perfect as we born.</p>\n<a id=\"more\"></a>\n<p>We lost, we failed, we broken, we fell down.</p>\n<p>But we hope, we recover, we rise, we march on.</p>\n<p>We don’t need to be great, don’t need to shine like stars, and we can’t always.</p>\n<p>Your story may not have such a happy beginning, but that doesn’t make who your are. It is the rest of your story, who you chose to be.</p>\n<p>Everything we done defines us.</p>\n","site":{"data":{}},"excerpt":"<p>We are never perfect as we born.</p>","more":"<p>We lost, we failed, we broken, we fell down.</p>\n<p>But we hope, we recover, we rise, we march on.</p>\n<p>We don’t need to be great, don’t need to shine like stars, and we can’t always.</p>\n<p>Your story may not have such a happy beginning, but that doesn’t make who your are. It is the rest of your story, who you chose to be.</p>\n<p>Everything we done defines us.</p>"},{"title":"寻找两个有序数列的中间值问题","date":"2018-04-03T16:00:00.000Z","_content":"\n以升序给定两个数列，求两个数列中的中间值问题。\n\n<!--more-->\n\n例如：\n\n11 12 13 14\n\n9 10 15 16 17\n\n这两个序列，它们的中间值为13.\n\n最常见的做法是将这两个序列放入同一个数组中排序，然后输出第$\\frac a b$个元素.\n\n但即使是O(logn)的快排在大规模数据里也难以在一秒内返回答案，我们需要利用数组有序的特点制定一种O(logn)的算法策略。\n\n我们把这个中值问题扩展到寻找第K小的值问题，等价于在两个数组中挑选出最小的K个元素。由于给定的数组已经按从小到大排序，通过比较两个数组各自的第K/2个元素可以将问题规模减小K/2。\n\n*假设a[i]为a中第i个元素。*\n\n定义函数\n```\nfindkth(int a[], int b[], int k)\n```\n表示寻找到并返回数组a，b中第K小的元素。\n\n\n```c\nif (a[k/2] < b[k/2]) {\n        return findkth(a + k / 2, b, k - k / 2);\n} else if (a[k/2] == b[k/2]) {\n        return a[k/2];\n} else {\n        return findkth(a, b + k / 2, k - k / 2);\n}\n```\n第一种情况是a的第k/2个元素小于b的第k/2个元素，那么将a中的前k/2个元素挑选出来，并在剩下的数组a，b中挑选出后k/2个元素。\n\n如果数组a，b各自的第k/2个元素相等，则将a中前k/2个元素挑出，b中前k/2个元素也挑出，这样第k小的元素即是a[k/2]（或b[k/2]）。\n\n再考虑基本情况：\n* 当数组a为空时，b[k]为第k小的元素。\n\n* 当k为1时选择数组a，b中最小的一个，即min(a[0], b[0])。\n\n```c\nint findkth(int a[], int b[], int n1, int n2, int k) {\n    if (n1 > n2) {\n        return findkth(b, a, n2, n1, k);\n    }\n    if (n1 == 0) {\n        return b[k-1];\n    }\n    if (k == 1) {\n        return min(a[0], b[0]);\n    }\n    int ath = min(k / 2, n1);\n    int bth = k - ath;\n    if (a[ath-1] < b[bth-1]) {\n        return findkth(a + ath, b, n1 - ath, n2, k - ath);\n    } else if (a[ath-1] == b[bth-1]) {\n        return a[ath-1];\n    } else {\n        return findkth(a, b + bth, n1, n2 - bth, k - bth);\n    }\n}\n```\n","source":"_posts/two-arrays-median.md","raw":"---\ntitle: 寻找两个有序数列的中间值问题\ndate: 2018.4.4\ntags: algorithms\n---\n\n以升序给定两个数列，求两个数列中的中间值问题。\n\n<!--more-->\n\n例如：\n\n11 12 13 14\n\n9 10 15 16 17\n\n这两个序列，它们的中间值为13.\n\n最常见的做法是将这两个序列放入同一个数组中排序，然后输出第$\\frac a b$个元素.\n\n但即使是O(logn)的快排在大规模数据里也难以在一秒内返回答案，我们需要利用数组有序的特点制定一种O(logn)的算法策略。\n\n我们把这个中值问题扩展到寻找第K小的值问题，等价于在两个数组中挑选出最小的K个元素。由于给定的数组已经按从小到大排序，通过比较两个数组各自的第K/2个元素可以将问题规模减小K/2。\n\n*假设a[i]为a中第i个元素。*\n\n定义函数\n```\nfindkth(int a[], int b[], int k)\n```\n表示寻找到并返回数组a，b中第K小的元素。\n\n\n```c\nif (a[k/2] < b[k/2]) {\n        return findkth(a + k / 2, b, k - k / 2);\n} else if (a[k/2] == b[k/2]) {\n        return a[k/2];\n} else {\n        return findkth(a, b + k / 2, k - k / 2);\n}\n```\n第一种情况是a的第k/2个元素小于b的第k/2个元素，那么将a中的前k/2个元素挑选出来，并在剩下的数组a，b中挑选出后k/2个元素。\n\n如果数组a，b各自的第k/2个元素相等，则将a中前k/2个元素挑出，b中前k/2个元素也挑出，这样第k小的元素即是a[k/2]（或b[k/2]）。\n\n再考虑基本情况：\n* 当数组a为空时，b[k]为第k小的元素。\n\n* 当k为1时选择数组a，b中最小的一个，即min(a[0], b[0])。\n\n```c\nint findkth(int a[], int b[], int n1, int n2, int k) {\n    if (n1 > n2) {\n        return findkth(b, a, n2, n1, k);\n    }\n    if (n1 == 0) {\n        return b[k-1];\n    }\n    if (k == 1) {\n        return min(a[0], b[0]);\n    }\n    int ath = min(k / 2, n1);\n    int bth = k - ath;\n    if (a[ath-1] < b[bth-1]) {\n        return findkth(a + ath, b, n1 - ath, n2, k - ath);\n    } else if (a[ath-1] == b[bth-1]) {\n        return a[ath-1];\n    } else {\n        return findkth(a, b + bth, n1, n2 - bth, k - bth);\n    }\n}\n```\n","slug":"two-arrays-median","published":1,"updated":"2018-04-04T12:21:17.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp7bszv0006ivfy5qbhgxi0","content":"<p>以升序给定两个数列，求两个数列中的中间值问题。</p>\n<a id=\"more\"></a>\n<p>例如：</p>\n<p>11 12 13 14</p>\n<p>9 10 15 16 17</p>\n<p>这两个序列，它们的中间值为13.</p>\n<p>最常见的做法是将这两个序列放入同一个数组中排序，然后输出第$\\frac a b$个元素.</p>\n<p>但即使是O(logn)的快排在大规模数据里也难以在一秒内返回答案，我们需要利用数组有序的特点制定一种O(logn)的算法策略。</p>\n<p>我们把这个中值问题扩展到寻找第K小的值问题，等价于在两个数组中挑选出最小的K个元素。由于给定的数组已经按从小到大排序，通过比较两个数组各自的第K/2个元素可以将问题规模减小K/2。</p>\n<p><em>假设a[i]为a中第i个元素。</em></p>\n<p>定义函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findkth(int a[], int b[], int k)</span><br></pre></td></tr></table></figure></p>\n<p>表示寻找到并返回数组a，b中第K小的元素。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a[k/<span class=\"number\">2</span>] &lt; b[k/<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a + k / <span class=\"number\">2</span>, b, k - k / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[k/<span class=\"number\">2</span>] == b[k/<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[k/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a, b + k / <span class=\"number\">2</span>, k - k / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种情况是a的第k/2个元素小于b的第k/2个元素，那么将a中的前k/2个元素挑选出来，并在剩下的数组a，b中挑选出后k/2个元素。</p>\n<p>如果数组a，b各自的第k/2个元素相等，则将a中前k/2个元素挑出，b中前k/2个元素也挑出，这样第k小的元素即是a[k/2]（或b[k/2]）。</p>\n<p>再考虑基本情况：</p>\n<ul>\n<li><p>当数组a为空时，b[k]为第k小的元素。</p>\n</li>\n<li><p>当k为1时选择数组a，b中最小的一个，即min(a[0], b[0])。</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findkth</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> b[], <span class=\"keyword\">int</span> n1, <span class=\"keyword\">int</span> n2, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n1 &gt; n2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(b, a, n2, n1, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n1 == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(a[<span class=\"number\">0</span>], b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ath = min(k / <span class=\"number\">2</span>, n1);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bth = k - ath;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[ath<span class=\"number\">-1</span>] &lt; b[bth<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a + ath, b, n1 - ath, n2, k - ath);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[ath<span class=\"number\">-1</span>] == b[bth<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[ath<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a, b + bth, n1, n2 - bth, k - bth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>以升序给定两个数列，求两个数列中的中间值问题。</p>","more":"<p>例如：</p>\n<p>11 12 13 14</p>\n<p>9 10 15 16 17</p>\n<p>这两个序列，它们的中间值为13.</p>\n<p>最常见的做法是将这两个序列放入同一个数组中排序，然后输出第$\\frac a b$个元素.</p>\n<p>但即使是O(logn)的快排在大规模数据里也难以在一秒内返回答案，我们需要利用数组有序的特点制定一种O(logn)的算法策略。</p>\n<p>我们把这个中值问题扩展到寻找第K小的值问题，等价于在两个数组中挑选出最小的K个元素。由于给定的数组已经按从小到大排序，通过比较两个数组各自的第K/2个元素可以将问题规模减小K/2。</p>\n<p><em>假设a[i]为a中第i个元素。</em></p>\n<p>定义函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findkth(int a[], int b[], int k)</span><br></pre></td></tr></table></figure></p>\n<p>表示寻找到并返回数组a，b中第K小的元素。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a[k/<span class=\"number\">2</span>] &lt; b[k/<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a + k / <span class=\"number\">2</span>, b, k - k / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[k/<span class=\"number\">2</span>] == b[k/<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[k/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a, b + k / <span class=\"number\">2</span>, k - k / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种情况是a的第k/2个元素小于b的第k/2个元素，那么将a中的前k/2个元素挑选出来，并在剩下的数组a，b中挑选出后k/2个元素。</p>\n<p>如果数组a，b各自的第k/2个元素相等，则将a中前k/2个元素挑出，b中前k/2个元素也挑出，这样第k小的元素即是a[k/2]（或b[k/2]）。</p>\n<p>再考虑基本情况：</p>\n<ul>\n<li><p>当数组a为空时，b[k]为第k小的元素。</p>\n</li>\n<li><p>当k为1时选择数组a，b中最小的一个，即min(a[0], b[0])。</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findkth</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> b[], <span class=\"keyword\">int</span> n1, <span class=\"keyword\">int</span> n2, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n1 &gt; n2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(b, a, n2, n1, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n1 == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(a[<span class=\"number\">0</span>], b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ath = min(k / <span class=\"number\">2</span>, n1);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bth = k - ath;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[ath<span class=\"number\">-1</span>] &lt; b[bth<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a + ath, b, n1 - ath, n2, k - ath);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[ath<span class=\"number\">-1</span>] == b[bth<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[ath<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findkth(a, b + bth, n1, n2 - bth, k - bth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfp7bszp0002ivfyiw5akfns","category_id":"cjfp7bszt0004ivfy14w1nn79","_id":"cjfp7bszz000aivfyrcabkazi"},{"post_id":"cjfp7bszr0003ivfy0ssqnavb","category_id":"cjfp7bszx0007ivfyg7chpjx3","_id":"cjfp7bt01000divfyt5fmnn9p"}],"PostTag":[{"post_id":"cjfp7bszp0002ivfyiw5akfns","tag_id":"cjfp7bszv0005ivfy6iziwnl6","_id":"cjfp7bszy0009ivfy562ce3mn"},{"post_id":"cjfp7bszr0003ivfy0ssqnavb","tag_id":"cjfp7bszx0008ivfyglnhn8f4","_id":"cjfp7bt00000civfyqnlcrn0s"},{"post_id":"cjfp7bszv0006ivfy5qbhgxi0","tag_id":"cjfp7bszv0005ivfy6iziwnl6","_id":"cjfp7bt01000eivfyuenaffbt"}],"Tag":[{"name":"algorithms","_id":"cjfp7bszv0005ivfy6iziwnl6"},{"name":"life","_id":"cjfp7bszx0008ivfyglnhn8f4"}]}}
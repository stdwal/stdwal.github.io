{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1523090185755},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1523090185755},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1523090185755},{"_id":"themes/apollo/_config.yml","hash":"261de70c54a5b6bac83afc8e1a77bbd715fae547","modified":1523090185755},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1523090185756},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1523090185760},{"_id":"source/.DS_Store","hash":"10a8d5284efcb66ec7c21d42e498b3cb1ae9d206","modified":1523089682981},{"_id":"source/_posts/max-subsequence-sum.md","hash":"55242932df6b03822484bcaa09f340d266e33d38","modified":1523089655914},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522301075390},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523090185749},{"_id":"source/_posts/hello-world.md","hash":"b9cb4bcb34c4a962fa7898663bcff542f231fa12","modified":1522582280977},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1523090185751},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523090182715},{"_id":"themes/apollo/.git/index","hash":"629dedda63cc5162607e184193bcce426b6f88d4","modified":1523090185772},{"_id":"themes/apollo/.git/packed-refs","hash":"aa26c25376c7e08c8fdb4920d5feed589e8f3eea","modified":1523090185746},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1523090185756},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1523090185756},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1523090185756},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1523090185757},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1523090185757},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1523090185757},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1523090185759},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1523090185763},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523090182716},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523090182715},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523090182717},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523090182718},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523090182716},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523090182718},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1523090182716},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523090182717},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1523090182717},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523090182719},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523090182715},{"_id":"themes/apollo/.git/logs/HEAD","hash":"a0853af22ebf6c6ad5275805a4959a46b7a25495","modified":1523090185750},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1523090185757},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1523090185758},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1523090185758},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1523090185758},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1523090185758},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1523090185759},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1523090185759},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1523090185759},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1523090185762},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523090185764},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523090185765},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1523090185771},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.idx","hash":"8c1076f4fe597fbc3ee8a7dabf01f7d99ae801e4","modified":1523090185738},{"_id":"themes/apollo/.git/refs/heads/master","hash":"bb45244afa960985b39f4bb9b86f3b4430f210ba","modified":1523090185750},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1523090185766},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1523090185767},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1523090185767},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1523090185768},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1523090185769},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1523090185769},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1523090185770},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1523090185771},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1523090185771},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"a0853af22ebf6c6ad5275805a4959a46b7a25495","modified":1523090185750},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523090185748},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"a0853af22ebf6c6ad5275805a4959a46b7a25495","modified":1523090185748},{"_id":"themes/apollo/.git/objects/pack/pack-c2c5ef3ed848a98d83e90f274a750ebc440ae015.pack","hash":"61afd27d8be982efeeba8d37e46294898cd54f8b","modified":1523090185738},{"_id":"public/atom.xml","hash":"4428b678b57bc67a0dea46bef8a21549540d896d","modified":1523090299562},{"_id":"public/sitemap.xml","hash":"c9450df2f262e14add07b6562a78ba757d46dffa","modified":1523090299566},{"_id":"public/2018/03/28/max-subsequence-sum/index.html","hash":"ae5a33121c3c279a721a87a7a11db476308b7eaf","modified":1523090299575},{"_id":"public/2018/01/01/hello-world/index.html","hash":"fb8ae4cab6d0ee182753ff4770318a061337e800","modified":1523090299575},{"_id":"public/archives/index.html","hash":"b9ac5367a34504af6737d53d89a7c4e8f04bb533","modified":1523090299575},{"_id":"public/index.html","hash":"23b433dd101b52c9861b4cac7885fa8b2eacfdda","modified":1523090299575},{"_id":"public/tags/algorithms/index.html","hash":"3aefaea3f94ffa8a8c9379152391d036c04431ba","modified":1523090299575},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1523090299577},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1523090299578},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1523090299578},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1523090299587},{"_id":"public/scss/apollo.css","hash":"6216c473855db6af71f910746be48405c8c499f6","modified":1523090299656}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"关于分治法求最大子序列和问题","date":"2018-03-27T16:00:00.000Z","_content":"\n求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。\n\n显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。\n\n<!--more-->\n\n分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。\n\n例如序列： 4 -3 5 -2 -1 2 6 -2\n\n|前半部分 |后半部分|\n|-----|------|\n|4 -3 5 -2| -1 2 6 -2|\n\n最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。\n\n因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.\n\n```c\nint MaxSubSum(int A[], int left, int right) {\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBoarderSum;\n    int Center, i;\n\n    if (left == right) {\n        if (A[left] > 0) {\n            return A[left];\n        } else {\n            return 0;\n        }\n    }\n    Center = (left + right) / 2;\n    MaxLeftSum = MaxSubSum(A, left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, right);\n\n    MaxLeftBorderSum = LeftBorderSum = 0;\n    for (i = Center; i >= left; i--) {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum > MaxLeftBorderSum) {\n            MaxLeftBorderSum = LeftBorderSum;\n        }\n    }\n    MaxRightBorderSum = RightBoarderSum = 0;\n    for (i = Center + 1; i <= right; i++) {\n        RightBoarderSum += A[i];\n        if (RightBoarderSum > MaxRightBorderSum) {\n            MaxRightBorderSum = RightBoarderSum;\n        }\n    }\n    return Max3(MaxLeftSum, MaxRightSum,\n         MaxLeftBorderSum + MaxRightBorderSum);\n}\n\n```\n\n代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。\n\n代码第18-31行分别处理左右两部分的最大子序列和问题。\n\n最后将三者的最大值返回即可。\n\n----\n参考文献：《数据结构与算法分析（C语言描述）》\n","source":"_posts/max-subsequence-sum.md","raw":"---\ntitle: 关于分治法求最大子序列和问题\ndate: 2018.3.28\ntag: algorithms\n---\n\n求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。\n\n显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。\n\n<!--more-->\n\n分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。\n\n例如序列： 4 -3 5 -2 -1 2 6 -2\n\n|前半部分 |后半部分|\n|-----|------|\n|4 -3 5 -2| -1 2 6 -2|\n\n最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。\n\n因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.\n\n```c\nint MaxSubSum(int A[], int left, int right) {\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBoarderSum;\n    int Center, i;\n\n    if (left == right) {\n        if (A[left] > 0) {\n            return A[left];\n        } else {\n            return 0;\n        }\n    }\n    Center = (left + right) / 2;\n    MaxLeftSum = MaxSubSum(A, left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, right);\n\n    MaxLeftBorderSum = LeftBorderSum = 0;\n    for (i = Center; i >= left; i--) {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum > MaxLeftBorderSum) {\n            MaxLeftBorderSum = LeftBorderSum;\n        }\n    }\n    MaxRightBorderSum = RightBoarderSum = 0;\n    for (i = Center + 1; i <= right; i++) {\n        RightBoarderSum += A[i];\n        if (RightBoarderSum > MaxRightBorderSum) {\n            MaxRightBorderSum = RightBoarderSum;\n        }\n    }\n    return Max3(MaxLeftSum, MaxRightSum,\n         MaxLeftBorderSum + MaxRightBorderSum);\n}\n\n```\n\n代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。\n\n代码第18-31行分别处理左右两部分的最大子序列和问题。\n\n最后将三者的最大值返回即可。\n\n----\n参考文献：《数据结构与算法分析（C语言描述）》\n","slug":"max-subsequence-sum","published":1,"updated":"2018-04-07T08:27:35.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp4n04t0000e2fy4a622e3l","content":"<p>求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。</p>\n<p>显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。</p>\n<a id=\"more\"></a>\n<p>分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。</p>\n<p>例如序列： 4 -3 5 -2 -1 2 6 -2</p>\n<table>\n<thead>\n<tr>\n<th>前半部分</th>\n<th>后半部分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 -3 5 -2</td>\n<td>-1 2 6 -2</td>\n</tr>\n</tbody>\n</table>\n<p>最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。</p>\n<p>因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxSubSum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftSum, MaxRightSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> LeftBorderSum, RightBoarderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Center, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    MaxLeftSum = MaxSubSum(A, left, Center);</span><br><span class=\"line\">    MaxRightSum = MaxSubSum(A, Center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    MaxLeftBorderSum = LeftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        LeftBorderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</span><br><span class=\"line\">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxRightBorderSum = RightBoarderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        RightBoarderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RightBoarderSum &gt; MaxRightBorderSum) &#123;</span><br><span class=\"line\">            MaxRightBorderSum = RightBoarderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Max3(MaxLeftSum, MaxRightSum,</span><br><span class=\"line\">         MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。</p>\n<p>代码第18-31行分别处理左右两部分的最大子序列和问题。</p>\n<p>最后将三者的最大值返回即可。</p>\n<hr>\n<p>参考文献：《数据结构与算法分析（C语言描述）》</p>\n","site":{"data":{}},"excerpt":"<p>求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。</p>\n<p>显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。</p>","more":"<p>分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。</p>\n<p>例如序列： 4 -3 5 -2 -1 2 6 -2</p>\n<table>\n<thead>\n<tr>\n<th>前半部分</th>\n<th>后半部分</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4 -3 5 -2</td>\n<td>-1 2 6 -2</td>\n</tr>\n</tbody>\n</table>\n<p>最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。</p>\n<p>因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxSubSum</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftSum, MaxRightSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> LeftBorderSum, RightBoarderSum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Center, i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[left] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    MaxLeftSum = MaxSubSum(A, left, Center);</span><br><span class=\"line\">    MaxRightSum = MaxSubSum(A, Center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">    MaxLeftBorderSum = LeftBorderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        LeftBorderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</span><br><span class=\"line\">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxRightBorderSum = RightBoarderSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = Center + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        RightBoarderSum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RightBoarderSum &gt; MaxRightBorderSum) &#123;</span><br><span class=\"line\">            MaxRightBorderSum = RightBoarderSum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Max3(MaxLeftSum, MaxRightSum,</span><br><span class=\"line\">         MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。</p>\n<p>代码第18-31行分别处理左右两部分的最大子序列和问题。</p>\n<p>最后将三者的最大值返回即可。</p>\n<hr>\n<p>参考文献：《数据结构与算法分析（C语言描述）》</p>"},{"title":"Hello World","date":"2017-12-31T16:00:00.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018.1.1\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-04-01T11:31:20.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfp4n0d20003e2fyqtgm7vbz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjfp4n04t0000e2fy4a622e3l","tag_id":"cjfp4n04z0001e2fy7t2dd6il","_id":"cjfp4n0510002e2fyqttvbvkp"}],"Tag":[{"name":"algorithms","_id":"cjfp4n04z0001e2fy7t2dd6il"}]}}
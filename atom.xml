<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stdwal</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stdwal.github.io/"/>
  <updated>2018-05-28T02:16:45.519Z</updated>
  <id>https://stdwal.github.io/</id>
  
  <author>
    <name>stdwal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vmware Fusion下Ubuntu学习</title>
    <link href="https://stdwal.github.io/2018/05/19/vmware-ubuntu/"/>
    <id>https://stdwal.github.io/2018/05/19/vmware-ubuntu/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.ubuntu.com" target="_blank" rel="noopener">下载Ubuntu发行版</a></p><a id="more"></a><h4 id="安装vmware-tools"><a href="#安装vmware-tools" class="headerlink" title="安装vmware tools"></a>安装vmware tools</h4><p>在虚拟机设置中点击安装vmware tools，获取一个VMwareTools-x.x.x-xxxx.tar.gz文件并解压。</p><p>打开终端并输入以下命令以安装vmware tools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./vmware-install.pl -d</span><br></pre></td></tr></table></figure><p>其中-d表示接受默认设置</p><h4 id="使用mac终端ssh连接到Ubuntu"><a href="#使用mac终端ssh连接到Ubuntu" class="headerlink" title="使用mac终端ssh连接到Ubuntu"></a>使用mac终端ssh连接到Ubuntu</h4><p>安装openssh-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>使用 <strong>ifconfig</strong> 命令查看Ubuntu的IP地址</p><p>如果提示 <em>Command ‘ifconfig’ not found</em> ,安装net-tools后再使用 <strong>ifconfig</strong> 获取IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure><p><img src="/images/ifconfig.png" alt="ifconfig"></p><p>打开mac终端，连接到对应的主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [username]@[ip]</span><br></pre></td></tr></table></figure><p>如果有类似如下的提示</p><blockquote><p>The authenticity of host ‘172.16.204.132 (172.16.204.132)’ can’t be established.<br>ECDSA key fingerprint is SHA256:FdGYxwkyB8V7+0DFAKvwX/A1NkomzxV/cJ/Ynp/iACo.<br>Are you sure you want to continue connecting (yes/no)? yes</p></blockquote><p>输入yes建立连接</p><p><img src="/images/ssh.png" alt="ssh"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cn.ubuntu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载Ubuntu发行版&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text3</title>
    <link href="https://stdwal.github.io/2018/04/27/sublime-text/"/>
    <id>https://stdwal.github.io/2018/04/27/sublime-text/</id>
    <published>2018-04-26T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><p>点击Help-&gt;Enter License,输入激活码（3143可用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">—– BEGIN LICENSE —– </span><br><span class="line">TwitterInc </span><br><span class="line">200 User License </span><br><span class="line">EA7E-890007 </span><br><span class="line">1D77F72E 390CDD93 4DCBA022 FAF60790 </span><br><span class="line">61AA12C0 A37081C5 D0316412 4584D136 </span><br><span class="line">94D7F7D4 95BC8C1C 527DA828 560BB037 </span><br><span class="line">D1EDDD8C AE7B379F 50C9D69D B35179EF </span><br><span class="line">2FE898C4 8E4277A8 555CE714 E1FB0E43 </span><br><span class="line">D5D52613 C3D12E98 BC49967F 7652EED2 </span><br><span class="line">9D2D2E61 67610860 6D338B72 5CF95C69 </span><br><span class="line">E36B85CC 84991F19 7575D828 470A92AB </span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure><h4 id="在终端中使用Sublime-Text"><a href="#在终端中使用Sublime-Text" class="headerlink" title="在终端中使用Sublime Text:"></a>在终端中使用Sublime Text:</h4><p>在终端中输入以下命令为subl创建链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl</span><br></pre></td></tr></table></figure><h4 id="编写markdown"><a href="#编写markdown" class="headerlink" title="编写markdown"></a>编写markdown</h4><p>按下 <strong>ctrl+shift+p</strong> 打开命令面板，输入 <strong>install</strong> 并选择 <strong>Package Control: install package</strong></p><p>在跳出的面板中输入 <strong>markdown</strong> 选择安装 <strong>MarkdownEditing</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;激活&quot;&gt;&lt;a href=&quot;#激活&quot; class=&quot;headerlink&quot; title=&quot;激活&quot;&gt;&lt;/a&gt;激活&lt;/h4&gt;&lt;p&gt;点击Help-&amp;gt;Enter License,输入激活码（3143可用）：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://stdwal.github.io/2018/04/26/heapsort/"/>
    <id>https://stdwal.github.io/2018/04/26/heapsort/</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p><p>堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><a id="more"></a><p>我们可以使用一个附加数组建立二叉堆，执行数次的DeleteMin操作，将元素记录到第二个数组然后将数组拷贝回来，得到N个元素的排序。</p><p>建立N个元素的二叉堆花费O(N)时间，每执行以此DeleteMin花费O(logN)时间，因此总的运行时间为O(NlogN)</p><p>避免使用第二个数组的聪明的做法是利用这样的事实：在每次DeleteMin之后，堆缩小了1。因此，位于堆中最后的单元可以用来存放刚刚删去的元素。</p><p>使用这种策略，在最后一个DeleteMin后，该数组将以递减的顺序包含这些元素。如果我们想要这些元素排成更典型的递增顺序，我们可以改变序的特性使得父亲的关键字的值大于儿子的关键字的值，即max堆。</p><p><em>数组从0开始计数</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LeftChild(i) (2 * (i) + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PerDown</span><span class="params">(ElementType A[i], <span class="keyword">int</span> i, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Child;</span><br><span class="line">        ElementType Tmp;</span><br><span class="line">        <span class="keyword">for</span> (Tmp = A[i]; LeftChild(i) &lt; N; i = Child) &#123;</span><br><span class="line">                Child = LeftChild(i);</span><br><span class="line">                <span class="keyword">if</span> (Child != N - <span class="number">1</span> &amp;&amp; A[Child<span class="number">-1</span>] &gt; A[Child])</span><br><span class="line">                        Child++;</span><br><span class="line">                <span class="keyword">if</span> (Tmp &lt; A[Child])</span><br><span class="line">                        A[i] = A[Child];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i] = Tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heapsort</span><span class="params">(ElementType A[], <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                PerDown(A, i, N);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                Swap(&amp;A[<span class="number">0</span>], &amp;A[i]);</span><br><span class="line">                PerDown(A, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PerDown函数用于判断当前元素在堆中是否满足堆序性质，即判断当前元素是否大于它的儿子。</p><p>在Heapsort函数中第一个for循环用于建立一个堆（自二叉堆的倒数第二层开始自底向上判断堆序性质），然后将堆顶的元素与最后的元素互换（DeleteMax）并重建堆，以此得到一个有序数组。</p><hr><p>参考：<br>数据结构与算法分析（C语言描述）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。&lt;/p&gt;
&lt;p&gt;堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithms" scheme="https://stdwal.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>由字符串拼接看排序的应用</title>
    <link href="https://stdwal.github.io/2018/04/24/sort-use/"/>
    <id>https://stdwal.github.io/2018/04/24/sort-use/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given {32, 321, 3214, 0229, 87}, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.</p><a id="more"></a><p>显然为使得拼接后的数字最小，可以考虑将每个数字以字符串的方式读入，按字典序排序。</p><p>但这同时这会带来一个问题：具有相同前缀的字符串该如何确定先后次序以期达到总体最小。</p><p>为了解决这个问题，我们需要换一种思路：现在有两个数字{32, 321}，有两种拼接方式，即32-321和321-32，显然321-32为题目所要求的最小字符串。</p><p>因此我们只需更换排序方式即可解决具有相同前缀的字符串排序问题，判断（a + b）和（b + a）的字典序即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b &lt; b + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given {32, 321, 3214, 0229, 87}, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithms" scheme="https://stdwal.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>《数据结构与算法分析——C语言描述》知识点及代码</title>
    <link href="https://stdwal.github.io/2018/04/14/data-structures-and-algorithm-analysis-in-c/"/>
    <id>https://stdwal.github.io/2018/04/14/data-structures-and-algorithm-analysis-in-c/</id>
    <published>2018-04-13T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>书中所有码源参见<a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c" target="_blank" rel="noopener">https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c</a></p><a id="more"></a><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>符号</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/max_sum.c" target="_blank" rel="noopener">最大子序列</a></li><li>对分查找</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/fig2_10.c" target="_blank" rel="noopener">欧几里得算法</a></li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/fig2_11.c" target="_blank" rel="noopener">幂运算</a></li><li>对数运行时间</li></ul><h4 id="表、栈和队列"><a href="#表、栈和队列" class="headerlink" title="表、栈和队列"></a>表、栈和队列</h4><ul><li>ADT</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/list.c" target="_blank" rel="noopener">链表</a></li><li>双链表</li><li>循环链表</li><li>静态链表</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/poly.c" target="_blank" rel="noopener">多项式ADT</a></li><li>基数排序</li><li>栈（<a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/stackli.c" target="_blank" rel="noopener">链表实现</a>、<a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/stackar.c" target="_blank" rel="noopener">数组实现</a>）</li><li>平衡符号</li><li>后缀表达式</li><li>中缀转后缀</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/queue.c" target="_blank" rel="noopener">队列</a></li></ul><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><ul><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/tree.c" target="_blank" rel="noopener">二叉查找树</a></li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/avltree.c" target="_blank" rel="noopener">AVL树</a></li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/splay.c" target="_blank" rel="noopener">伸展树</a></li><li>树的遍历（先序、中序、后序、层序）</li><li>B-树</li></ul><h4 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h4><ul><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/hashfunc.c" target="_blank" rel="noopener">散列函数</a></li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/hashsep.c" target="_blank" rel="noopener">分离链接法</a></li><li>开放定址法（线性探测、<a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/hashquad.c" target="_blank" rel="noopener">平方探测</a>、双散列）</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/hashquad.c" target="_blank" rel="noopener">再散列</a></li><li>可扩散列</li></ul><h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><ul><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/binheap.c" target="_blank" rel="noopener">二叉堆</a></li><li>d-堆</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/leftheap.c" target="_blank" rel="noopener">左式堆</a></li><li>斜堆</li><li><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/binomial.c" target="_blank" rel="noopener">二项队列</a></li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/sort.c" target="_blank" rel="noopener">排序</a></h4><ul><li>插入排序</li><li>希尔排序</li><li>堆排序</li><li>归并排序</li><li>快速排序</li><li>桶式排序</li><li>外部排序</li></ul><h4 id="不相交集ADT"><a href="#不相交集ADT" class="headerlink" title="不相交集ADT"></a><a href="https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c/blob/master/code/disjsets.c" target="_blank" rel="noopener">不相交集ADT</a></h4><ul><li>路径压缩</li><li>按秩求并</li><li>Union/Find算法分析</li></ul><h4 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h4><ul><li>图的表示</li><li>拓扑排序</li><li>最短路</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书中所有码源参见&lt;a href=&quot;https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/stdwal/data-structures-and-algorithm-analysis-in-c&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="data structures" scheme="https://stdwal.github.io/tags/data-structures/"/>
    
      <category term="algorithms" scheme="https://stdwal.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数列的中间值问题</title>
    <link href="https://stdwal.github.io/2018/04/04/two-arrays-median/"/>
    <id>https://stdwal.github.io/2018/04/04/two-arrays-median/</id>
    <published>2018-04-03T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>以升序给定两个数列，求两个数列中的中间值问题。</p><a id="more"></a><p>例如：</p><p>11 12 13 14<br>9 10 15 16 17</p><p>这两个序列，它们的中间值为13.</p><p>最常见的做法是将这两个序列放入同一个数组中排序，然后输出第(a+b)/2个元素.</p><p>但即使是O(logn)的快排在大规模数据里也难以在一秒内返回答案，我们需要利用数组有序的特点制定一种O(logn)的算法策略。</p><p>我们把这个中值问题扩展到寻找第K小的值问题，等价于在两个数组中挑选出最小的K个元素。由于给定的数组已经按从小到大排序，通过比较两个数组各自的第K/2个元素可以将问题规模减小K/2。</p><p><em>注：假设a[i]为a中第i个元素。</em></p><p>定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findkth(int a[], int b[], int k)</span><br></pre></td></tr></table></figure></p><p>表示寻找到并返回数组a，b中第K小的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a[k/<span class="number">2</span>] &lt; b[k/<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> findkth(a + k / <span class="number">2</span>, b, k - k / <span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[k/<span class="number">2</span>] == b[k/<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[k/<span class="number">2</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findkth(a, b + k / <span class="number">2</span>, k - k / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种情况是a的第k/2个元素小于b的第k/2个元素，那么将a中的前k/2个元素挑选出来，并在剩下的数组a，b中挑选出后k/2个元素。</p><p>如果数组a，b各自的第k/2个元素相等，则将a中前k/2个元素挑出，b中前k/2个元素也挑出，这样第k小的元素即是a[k/2]（或b[k/2]）。</p><p>再考虑基本情况：</p><ul><li><p>当数组a为空时，b[k]为第k小的元素。</p></li><li><p>当k为1时选择数组a，b中最小的一个，即min(a[0], b[0])。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findkth</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> b[], <span class="keyword">int</span> n1, <span class="keyword">int</span> n2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n1 &gt; n2) &#123;</span><br><span class="line">        <span class="keyword">return</span> findkth(b, a, n2, n1, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n1 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> b[k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> min(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ath = min(k / <span class="number">2</span>, n1);</span><br><span class="line">    <span class="keyword">int</span> bth = k - ath;</span><br><span class="line">    <span class="keyword">if</span> (a[ath<span class="number">-1</span>] &lt; b[bth<span class="number">-1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> findkth(a + ath, b, n1 - ath, n2, k - ath);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[ath<span class="number">-1</span>] == b[bth<span class="number">-1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[ath<span class="number">-1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findkth(a, b + bth, n1, n2 - bth, k - bth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以升序给定两个数列，求两个数列中的中间值问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithms" scheme="https://stdwal.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>关于分治法求最大子序列和问题</title>
    <link href="https://stdwal.github.io/2018/03/28/max-subsequence-sum/"/>
    <id>https://stdwal.github.io/2018/03/28/max-subsequence-sum/</id>
    <published>2018-03-27T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。</p><p>显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。</p><a id="more"></a><p>分治策略是将问题分成两个大致相等的子问题，然后递归地对它们求解。因此我们可将整个序列分成两部分求解。</p><p>例如序列： 4 -3 5 -2 -1 2 6 -2</p><table><thead><tr><th>前半部分</th><th>后半部分</th></tr></thead><tbody><tr><td>4 -3 5 -2</td><td>-1 2 6 -2</td></tr></tbody></table><p>最大子序列的和可能在三处位置出现：或者整个出现在输入数据的左半边，或者整个数据的右半边，或者跨越输入数据的中部从而占据左右两半部分。</p><p>因此三者中的最大值即为最大子序列和。在本例中，前半部分的最大子序列和为6，后半部分的子序列和为8，而跨越两个部分的最大子序列和为11，因此该例的答案为11.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubSum</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MaxLeftSum, MaxRightSum;</span><br><span class="line">    <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class="line">    <span class="keyword">int</span> LeftBorderSum, RightBoarderSum;</span><br><span class="line">    <span class="keyword">int</span> Center, i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[left] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    MaxLeftSum = MaxSubSum(A, left, Center);</span><br><span class="line">    MaxRightSum = MaxSubSum(A, Center + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    MaxLeftBorderSum = LeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = Center; i &gt;= left; i--) &#123;</span><br><span class="line">        LeftBorderSum += A[i];</span><br><span class="line">        <span class="keyword">if</span> (LeftBorderSum &gt; MaxLeftBorderSum) &#123;</span><br><span class="line">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MaxRightBorderSum = RightBoarderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = Center + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">        RightBoarderSum += A[i];</span><br><span class="line">        <span class="keyword">if</span> (RightBoarderSum &gt; MaxRightBorderSum) &#123;</span><br><span class="line">            MaxRightBorderSum = RightBoarderSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Max3(MaxLeftSum, MaxRightSum,</span><br><span class="line">         MaxLeftBorderSum + MaxRightBorderSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码第7-13行处理基准情况，即当序列中只有一个元素时，如果该元素大于0，则该元素的值就是最大子序列之和，否则答案为0。</p><p>代码第18-31行分别处理左右两部分的最大子序列和问题。</p><p>最后将三者的最大值返回即可。</p><hr><p>参考文献：《数据结构与算法分析（C语言描述）》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;求解最大子序列和问题有大致四个算法，效率分别为O(n^3)、O(n^2)、O(logn)和O(n)。&lt;/p&gt;
&lt;p&gt;显然O(n)是最完美的线性联机算法，但这里主要讨论使用分治法递归求解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithms" scheme="https://stdwal.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stdwal.github.io/2018/01/01/hello-world/"/>
    <id>https://stdwal.github.io/2018/01/01/hello-world/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-05-28T02:16:45.519Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
